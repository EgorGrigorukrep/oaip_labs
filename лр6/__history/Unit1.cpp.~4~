//---------------------------------------------------------------------------

#pragma hdrstop

#include "Unit1.h"
#include "Form.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
Tree::Tree(){
	root=NULL;
}

TreeItem* Tree::getRoot(){ return root;}
TreeItem** Tree::getRootAddress(){ return &root;}
void Tree::setRoot(TreeItem* value){ root=value;}

TreeItem* Tree::createNewItem(TEdit* EditNumber, TEdit* EditText){
	TreeItem* newItem;
	try{
		newItem=new TreeItem;
	}
	catch(EOutOfMemory&){
		ShowMessage("Нехватка оперативной памяти");
		return NULL;
	}

	newItem->left=NULL;
	newItem->right=NULL;
	newItem->text=EditText->Text;
	try{
		newItem->number=StrToInt(EditNumber->Text);
	}
	catch(EConvertError&){
		ShowMessage("Введено недопустимое число "+EditNumber->Text);
		int i,length=EditNumber->Text.Length();
		AnsiString correct="";
		for (i = 1; i <=length; i++) {
			if (EditNumber->Text[i]>='0' && EditNumber->Text[i]<='9') {
				correct+=EditNumber->Text[i];
			}
			else if (EditNumber->Text[i]=='-') {
				correct+=EditNumber->Text[i];
			}
		}
		EditNumber->Text=correct;
		return NULL;
	}
	return newItem;
}

TreeItem* Tree::add(TreeItem* newItem, TreeItem* tempRoot){
	if (tempRoot==NULL) {
		tempRoot=newItem;
		return tempRoot;
	}
	else{
		if (tempRoot->number < newItem->number) {
			tempRoot->right=add(newItem,tempRoot->right);
		}
		else if (tempRoot->number > newItem->number) {
			tempRoot->left=add(newItem,tempRoot->left);
		}
		else if (tempRoot->number == newItem->number) {
			if (tempRoot->text < newItem->text) {
				tempRoot->right=add(newItem,tempRoot->right);
			}
			else if (tempRoot->text > newItem->text) {
				tempRoot->left=add(newItem,tempRoot->left);
			}
		}
		return tempRoot;
	}
}

void Tree::find(TreeItem* searchItem, TreeItem* tempRoot, TreeItem** result){
	static bool wasFound=false;

	if (tempRoot==NULL) {
		return;
	}

	if (searchItem->number > tempRoot->number) {
		find(searchItem,tempRoot->right,result);
	}
	if (searchItem->number < tempRoot->number) {
		find(searchItem,tempRoot->left,result);
	}
	if (searchItem->number == tempRoot->number) {
		if (searchItem->text!="") {
			if (searchItem->text==tempRoot->text) {
				(*result)=tempRoot;
				wasFound=true;
			}
		}
		else{
			wasFound=true;
			(*result)=tempRoot;
		}
	}
}

void Tree::findParent(TreeItem* son,TreeItem* tempRoot, TreeItem** parent){
	if (tempRoot==NULL) {
		return;
	}
	if (tempRoot->right==son || tempRoot->left==son) {
		(*parent)=tempRoot;
	}
	else {
		findParent(son,tempRoot->left,parent);
		if ((*parent)==NULL) {
			findParent(son,tempRoot->right,parent);
		}
	}
}

/*void Tree::findParent(TreeItem* searchItem, TreeItem* tempRoot, TreeItem** result){
	if (tempRoot->right==NULL && tempRoot->left==NULL) {
		return;
	}

	if (tempRoot->right!=NULL && tempRoot->left!=NULL && (*result)==NULL) {
		if (searchItem->number != tempRoot->right->number  &&  searchItem->number != tempRoot->left->number) {
			find(searchItem,tempRoot->left,result);
			if ((*result)==NULL) {
				find(searchItem,tempRoot->right,result);
			}
		}
		else if (searchItem->number == tempRoot->right->number){
			if (searchItem->text!="") {
				if (searchItem->text==tempRoot->right->text) {
					(*result)=tempRoot;
				}
				else {
					find(searchItem,tempRoot->right,result);
					if ((*result)==NULL) find(searchItem,tempRoot->left,result);
				}
			}
			else{
				(*result)=tempRoot;
			}
		}
		else if (searchItem->number == tempRoot->left->number) {
			if (searchItem->text!="") {
				if (searchItem->text==tempRoot->left->text) {
					(*result)=tempRoot;
				}
				else {
					find(searchItem,tempRoot->right,result);
					if ((*result)==NULL) find(searchItem,tempRoot->left,result);
				}
			}
			else{
				(*result)=tempRoot;
			}
		}
	}
	else if (tempRoot->right==NULL && result==NULL) {
		if (searchItem->number != tempRoot->left->number) {
			find(searchItem,tempRoot->left,result);
		}
		else {
			if (searchItem->text!="") {
				if (searchItem->text==tempRoot->left->text) {
					(*result)=tempRoot;
				}
				else {
					find(searchItem,tempRoot->left,result);
				}
			}
			else{
				(*result)=tempRoot;
			}
		}
	}
	else if (tempRoot->left==NULL && result==NULL) {
		if (searchItem->number != tempRoot->right->number) {
			find(searchItem,tempRoot->right,result);
		}
		else {
			if (searchItem->text!="") {
				if (searchItem->text==tempRoot->right->text) {
					(*result)=tempRoot;
				}
				else {
					find(searchItem,tempRoot->right,result);
				}
			}
			else{
				(*result)=tempRoot;
			}
		}
	}
}      */

void Tree::showInTreeView(TTreeView* TreeView, TreeItem* tempRoot){
	if (tempRoot->right==NULL && tempRoot->left==NULL) {
		TreeView->Items->Add(NULL,tempRoot->text+" ("+StrToInt(tempRoot->number)+")");
	}
}

void Tree::directDetour(TreeItem* tempRoot, TMemo* Memo){
	if (tempRoot==NULL) return;

	if (tempRoot->right==NULL && tempRoot->left==NULL) {
		Memo->Lines->Add(tempRoot->text+" ("+IntToStr(tempRoot->number)+")");
	}
	else {
		Memo->Lines->Add(tempRoot->text+" ("+IntToStr(tempRoot->number)+")");
		if (tempRoot->left!=NULL) {
			directDetour(tempRoot->left,Memo);
		}
		if (tempRoot->right!=NULL) {
			directDetour(tempRoot->right,Memo);
		}
	}
}

void Tree::reverseDetour(TreeItem* tempRoot, TMemo* Memo){
	if (tempRoot==NULL) return;

	if (tempRoot->right==NULL && tempRoot->left==NULL) {
		Memo->Lines->Add(tempRoot->text+" ("+IntToStr(tempRoot->number)+")");
	}
	else {
		if (tempRoot->left!=NULL) {
			reverseDetour(tempRoot->left,Memo);
		}
		if (tempRoot->right!=NULL) {
			reverseDetour(tempRoot->right,Memo);
		}
		Memo->Lines->Add(tempRoot->text+" ("+IntToStr(tempRoot->number)+")");
	}
}

void Tree::symmetricDetour(TreeItem* tempRoot,TMemo* Memo){
	if (tempRoot==NULL) return;

	if (tempRoot->right==NULL && tempRoot->left==NULL) {
		Memo->Lines->Add(tempRoot->text+" ("+IntToStr(tempRoot->number)+")");
	}
	else{
		if (tempRoot->left!=NULL) {
			symmetricDetour(tempRoot->left,Memo);
		}
		Memo->Lines->Add(tempRoot->text+" ("+IntToStr(tempRoot->number)+")");
        if (tempRoot->right!=NULL) {
			symmetricDetour(tempRoot->right,Memo);
		}
    }
}

void Tree::deleteItem(TreeItem* item,TreeItem* tempRoot){
	TreeItem* parent=NULL;
	findParent(item,tempRoot,&parent);
	if (parent!=NULL) {
		Form1->Memo1->Lines->Add("Родитель: "+parent->text+" ("+IntToStr(parent->number)+")");
		if (parent->right!=NULL) Form1->Memo1->Lines->Add("Правый: "+parent->right->text+" ("+IntToStr(parent->right->number)+")");
		if (parent->left!=NULL) Form1->Memo1->Lines->Add("Левый: "+parent->left->text+" ("+IntToStr(parent->left->number)+")");
	}
	else Form1->Memo1->Lines->Add("NULL");
}
